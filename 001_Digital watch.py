#1. ğŸ•’   Digital watch with alarm :

import tkinter as tk
from time import strftime
import threading
import time
from termcolor import colored  

# Fereastra pentru ceas
root = tk.Tk()
root.title('Digital Clock with Alarm')

# Eticheta pentru ceas
clock_label = tk.Label(root, font=('Helvetica', 48), bg='black', fg='cyan')
clock_label.pack(anchor='center', fill='both', expand=True)

# Variabila care va È›ine ora alarmei
alarm_time = None

# FuncÈ›ia care actualizeazÄƒ timpul pe ceas
def update_time():
    current_time = strftime('%H:%M:%S')  # ObÈ›ine ora curentÄƒ
    clock_label.config(text=current_time)  # ActualizeazÄƒ ceasul

    # VerificÄƒ dacÄƒ ora curentÄƒ corespunde cu ora alarmei
    if alarm_time and current_time[:5] == alarm_time:
        print(colored(f"A sunat alarma la {alarm_time}!", 'red'))  # AfiÈ™eazÄƒ mesajul roÈ™u Ã®n consolÄƒ
        
    clock_label.after(1000, update_time)  # ActualizeazÄƒ ceasul la fiecare secundÄƒ

# FuncÈ›ia pentru setarea alarmei
def set_alarm():
    global alarm_time
    alarm_input = input("SeteazÄƒ ora alarmei (format HH:MM): ")

    try:
        # VerificÄƒ dacÄƒ inputul este Ã®ntr-un format corect
        time.strptime(alarm_input, '%H:%M')  # VerificÄƒ dacÄƒ formatul e corect
        alarm_time = alarm_input  # SalveazÄƒ ora alarmei
        print(f"Alarma este setatÄƒ la: {alarm_time}")
    except ValueError:
        print("Format invalid. Te rog sÄƒ introduci ora Ã®n formatul HH:MM.")

# SeteazÄƒ alarma Ã®ntr-un thread separat
def alarm_thread_function():
    while True:
        set_alarm()
        time.sleep(1)  # EvitÄƒ blocarea programului

# PorneÈ™te funcÈ›ia de actualizare a timpului È™i setarea alarmei Ã®n paralel
thread = threading.Thread(target=alarm_thread_function)
thread.daemon = True
thread.start()

update_time()

root.mainloop()